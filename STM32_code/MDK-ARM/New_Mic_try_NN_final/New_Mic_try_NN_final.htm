<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [New_Mic_try_NN_final\New_Mic_try_NN_final.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image New_Mic_try_NN_final\New_Mic_try_NN_final.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6220000: Last Updated: Wed Jan 22 21:43:59 2025
<BR><P>
<H3>Maximum Stack Usage =     188744 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; MX_X_CUBE_AI_Process &rArr; arm_radix8_butterfly_f32
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[14b]">st_sssa8_dense_loop</a>
 <LI><a href="#[14c]">st_sssa8_dense_memopt_loop</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[c]">SecureFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[c]">SecureFault_Handler</a><BR>
 <LI><a href="#[36]">ADC1_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[36]">ADC1_IRQHandler</a><BR>
 <LI><a href="#[a]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[a]">BusFault_Handler</a><BR>
 <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
 <LI><a href="#[9]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[9]">MemManage_Handler</a><BR>
 <LI><a href="#[7]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[7]">NMI_Handler</a><BR>
 <LI><a href="#[b]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[b]">UsageFault_Handler</a><BR>
 <LI><a href="#[e0]">_ttywrch</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[e0]">_ttywrch</a><BR>
 <LI><a href="#[af]">_sys_exit</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[af]">_sys_exit</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[36]">ADC1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[82]">ADC4_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[81]">ADF1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[6e]">AES_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[a]">BusFault_Handler</a> from lto-llvm-f8a583.o(.text.BusFault_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[59]">COMP_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[8c]">CORDIC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[5b]">CRS_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[37]">DAC1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[80]">DCACHE1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[88]">DCMI_PSSI_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[87]">DMA2D_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[e]">DebugMon_Handler</a> from lto-llvm-f8a583.o(.text.DebugMon_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[1c]">EXTI0_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[26]">EXTI10_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[27]">EXTI11_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[28]">EXTI12_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[29]">EXTI13_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[2a]">EXTI14_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[2b]">EXTI15_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[1d]">EXTI1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[1e]">EXTI2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[1f]">EXTI3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[20]">EXTI4_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[21]">EXTI5_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[22]">EXTI6_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[23]">EXTI7_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[24]">EXTI8_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[25]">EXTI9_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[38]">FDCAN1_IT0_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[39]">FDCAN1_IT1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[17]">FLASH_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[18]">FLASH_S_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[8d]">FMAC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[5c]">FMC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[70]">FPU_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[2e]">GPDMA1_Channel0_IRQHandler</a> from lto-llvm-f8a583.o(.text.GPDMA1_Channel0_IRQHandler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[63]">GPDMA1_Channel10_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[64]">GPDMA1_Channel11_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[65]">GPDMA1_Channel12_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[66]">GPDMA1_Channel13_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[67]">GPDMA1_Channel14_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[68]">GPDMA1_Channel15_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[2f]">GPDMA1_Channel1_IRQHandler</a> from lto-llvm-f8a583.o(.text.GPDMA1_Channel1_IRQHandler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[30]">GPDMA1_Channel2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[31]">GPDMA1_Channel3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[32]">GPDMA1_Channel4_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[33]">GPDMA1_Channel5_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[34]">GPDMA1_Channel6_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[35]">GPDMA1_Channel7_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[61]">GPDMA1_Channel8_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[62]">GPDMA1_Channel9_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[19]">GTZC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[71]">HASH_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[8]">HardFault_Handler</a> from lto-llvm-f8a583.o(.text.HardFault_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[49]">I2C1_ER_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[48]">I2C1_EV_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[4b]">I2C2_ER_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[4a]">I2C2_EV_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[6a]">I2C3_ER_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[69]">I2C3_EV_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[75]">I2C4_ER_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[76]">I2C4_EV_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[7c]">ICACHE_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[2c]">IWDG_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[83]">LPDMA1_Channel0_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[84]">LPDMA1_Channel1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[85]">LPDMA1_Channel2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[86]">LPDMA1_Channel3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[54]">LPTIM1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[55]">LPTIM2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[73]">LPTIM3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[7f]">LPTIM4_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[53]">LPUART1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[8e]">LSECSSD_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[77]">MDF1_FLT0_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[78]">MDF1_FLT1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[79]">MDF1_FLT2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[7a]">MDF1_FLT3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[8a]">MDF1_FLT4_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[8b]">MDF1_FLT5_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[9]">MemManage_Handler</a> from lto-llvm-f8a583.o(.text.MemManage_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[7]">NMI_Handler</a> from lto-llvm-f8a583.o(.text.NMI_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[5d]">OCTOSPI1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[89]">OCTOSPI2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[7d]">OTFDEC1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[7e]">OTFDEC2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[5a]">OTG_FS_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[72]">PKA_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[12]">PVD_PVM_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[5e]">PWR_S3WU_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[f]">PendSV_Handler</a> from lto-llvm-f8a583.o(.text.PendSV_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[16]">RAMCFG_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[1a]">RCC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[1b]">RCC_S_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[6f]">RNG_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[13]">RTC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[14]">RTC_S_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[6]">Reset_Handler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[2d]">SAES_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[6b]">SAI1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[6c]">SAI2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[95]">SAI_DMAError</a> from lto-llvm-f8a583.o(.text.SAI_DMAError) referenced 2 times from lto-llvm-f8a583.o(.text.HAL_SAI_Receive_DMA)
 <LI><a href="#[93]">SAI_DMARxCplt</a> from lto-llvm-f8a583.o(.text.SAI_DMARxCplt) referenced 2 times from lto-llvm-f8a583.o(.text.HAL_SAI_Receive_DMA)
 <LI><a href="#[94]">SAI_DMARxHalfCplt</a> from lto-llvm-f8a583.o(.text.SAI_DMARxHalfCplt) referenced 2 times from lto-llvm-f8a583.o(.text.HAL_SAI_Receive_DMA)
 <LI><a href="#[5f]">SDMMC1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[60]">SDMMC2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[4c]">SPI1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[4d]">SPI2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[74]">SPI3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[d]">SVC_Handler</a> from lto-llvm-f8a583.o(.text.SVC_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[c]">SecureFault_Handler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[10]">SysTick_Handler</a> from lto-llvm-f8a583.o(.text.SysTick_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[8f]">SystemInit</a> from lto-llvm-f8a583.o(.text.SystemInit) referenced from startup_stm32u585xx.o(.text)
 <LI><a href="#[15]">TAMP_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[56]">TIM15_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[57]">TIM16_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[58]">TIM17_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[3a]">TIM1_BRK_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[3d]">TIM1_CC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[3c]">TIM1_TRG_COM_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[3b]">TIM1_UP_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[3e]">TIM2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[3f]">TIM3_IRQHandler</a> from lto-llvm-f8a583.o(.text.TIM3_IRQHandler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[40]">TIM4_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[41]">TIM5_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[42]">TIM6_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[43]">TIM7_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[44]">TIM8_BRK_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[47]">TIM8_CC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[46]">TIM8_TRG_COM_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[45]">TIM8_UP_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[6d]">TSC_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[51]">UART4_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[52]">UART5_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[7b]">UCPD1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[4e]">USART1_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[4f]">USART2_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[50]">USART3_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[b]">UsageFault_Handler</a> from lto-llvm-f8a583.o(.text.UsageFault_Handler) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[11]">WWDG_IRQHandler</a> from startup_stm32u585xx.o(.text) referenced from startup_stm32u585xx.o(RESET)
 <LI><a href="#[90]">__main</a> from __main.o(!!!main) referenced from startup_stm32u585xx.o(.text)
 <LI><a href="#[92]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[0]">forward_conv2d_deep_sssa8_ch</a> from layers_conv2d_sssa8_ch.o(.text.forward_conv2d_deep_sssa8_ch) referenced 2 times from lto-llvm-f8a583.o(.data.conv2d_12_layer)
 <LI><a href="#[0]">forward_conv2d_deep_sssa8_ch</a> from layers_conv2d_sssa8_ch.o(.text.forward_conv2d_deep_sssa8_ch) referenced 2 times from lto-llvm-f8a583.o(.data.conv2d_18_layer)
 <LI><a href="#[0]">forward_conv2d_deep_sssa8_ch</a> from layers_conv2d_sssa8_ch.o(.text.forward_conv2d_deep_sssa8_ch) referenced 2 times from lto-llvm-f8a583.o(.data.conv2d_24_layer)
 <LI><a href="#[0]">forward_conv2d_deep_sssa8_ch</a> from layers_conv2d_sssa8_ch.o(.text.forward_conv2d_deep_sssa8_ch) referenced 2 times from lto-llvm-f8a583.o(.data.conv2d_30_layer)
 <LI><a href="#[0]">forward_conv2d_deep_sssa8_ch</a> from layers_conv2d_sssa8_ch.o(.text.forward_conv2d_deep_sssa8_ch) referenced 2 times from lto-llvm-f8a583.o(.data.conv2d_6_layer)
 <LI><a href="#[3]">forward_dense_integer_SSSA</a> from layers_conv2d_stm32_integer.o(.text.forward_dense_integer_SSSA) referenced 2 times from lto-llvm-f8a583.o(.data.gemm_35_layer)
 <LI><a href="#[3]">forward_dense_integer_SSSA</a> from layers_conv2d_stm32_integer.o(.text.forward_dense_integer_SSSA) referenced 2 times from lto-llvm-f8a583.o(.data.gemm_36_layer)
 <LI><a href="#[5]">forward_mp_integer_INT8</a> from layers_pool_stm32_integer.o(.text.forward_mp_integer_INT8) referenced 2 times from lto-llvm-f8a583.o(.data.pool_15_layer)
 <LI><a href="#[5]">forward_mp_integer_INT8</a> from layers_pool_stm32_integer.o(.text.forward_mp_integer_INT8) referenced 2 times from lto-llvm-f8a583.o(.data.pool_21_layer)
 <LI><a href="#[5]">forward_mp_integer_INT8</a> from layers_pool_stm32_integer.o(.text.forward_mp_integer_INT8) referenced 2 times from lto-llvm-f8a583.o(.data.pool_27_layer)
 <LI><a href="#[5]">forward_mp_integer_INT8</a> from layers_pool_stm32_integer.o(.text.forward_mp_integer_INT8) referenced 2 times from lto-llvm-f8a583.o(.data.pool_33_layer)
 <LI><a href="#[5]">forward_mp_integer_INT8</a> from layers_pool_stm32_integer.o(.text.forward_mp_integer_INT8) referenced 2 times from lto-llvm-f8a583.o(.data.pool_9_layer)
 <LI><a href="#[1]">forward_pad</a> from layers_generic_float.o(.text.forward_pad) referenced 2 times from lto-llvm-f8a583.o(.data.conv2d_12_pad_before_layer)
 <LI><a href="#[1]">forward_pad</a> from layers_generic_float.o(.text.forward_pad) referenced 2 times from lto-llvm-f8a583.o(.data.conv2d_18_pad_before_layer)
 <LI><a href="#[1]">forward_pad</a> from layers_generic_float.o(.text.forward_pad) referenced 2 times from lto-llvm-f8a583.o(.data.conv2d_24_pad_before_layer)
 <LI><a href="#[1]">forward_pad</a> from layers_generic_float.o(.text.forward_pad) referenced 2 times from lto-llvm-f8a583.o(.data.conv2d_30_pad_before_layer)
 <LI><a href="#[1]">forward_pad</a> from layers_generic_float.o(.text.forward_pad) referenced 2 times from lto-llvm-f8a583.o(.data.conv2d_6_pad_before_layer)
 <LI><a href="#[4]">forward_sm_integer</a> from layers_nl_stm32_integer.o(.text.forward_sm_integer) referenced 2 times from lto-llvm-f8a583.o(.data.nl_37_layer)
 <LI><a href="#[91]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[2]">node_convert</a> from core_convert.o(.text.node_convert) referenced 2 times from lto-llvm-f8a583.o(.data.conversion_0_layer)
 <LI><a href="#[2]">node_convert</a> from core_convert.o(.text.node_convert) referenced 2 times from lto-llvm-f8a583.o(.data.conversion_38_layer)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[90]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(.text)
</UL>
<P><STRONG><a name="[96]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[98]"></a>__scatterload_rt2</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[16a]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[16b]"></a>__scatterload_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[16c]"></a>__decompress</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[16d]"></a>__decompress2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dclz77c.o(!!dclz77c), UNUSED)

<P><STRONG><a name="[16e]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, __scatter.o(!!handler_null), UNUSED)

<P><STRONG><a name="[16f]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[bc]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[99]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[9b]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[170]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[a8]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[9d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[9f]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000007))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[171]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000006))

<P><STRONG><a name="[172]"></a>__rt_lib_init_relocate_pie_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[173]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[174]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[175]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[176]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[177]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[178]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[179]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[17a]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[17b]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[17c]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[17d]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000010))

<P><STRONG><a name="[17e]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[a1]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000026))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[17f]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[180]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[181]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[182]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000034))

<P><STRONG><a name="[183]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[184]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000035))

<P><STRONG><a name="[185]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000027))

<P><STRONG><a name="[ad]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[186]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[a3]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[187]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[188]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[189]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[18a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[18b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[18c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[97]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[18d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[a5]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[a7]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[18e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[a9]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 188744 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; MX_X_CUBE_AI_Process &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[18f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[dc]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[ac]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[190]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[ae]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[6]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>SecureFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SecureFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>ADC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>ADC4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>ADF1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>AES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[8c]"></a>CORDIC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>CRS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>DAC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>DCACHE1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[88]"></a>DCMI_PSSI_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[87]"></a>DMA2D_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>EXTI10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>EXTI11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>EXTI12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>EXTI13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[2a]"></a>EXTI14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>EXTI15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>EXTI5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>EXTI6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>EXTI7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>EXTI8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>EXTI9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[38]"></a>FDCAN1_IT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>FDCAN1_IT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>FLASH_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[8d]"></a>FMAC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>FMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>FPU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>GPDMA1_Channel10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>GPDMA1_Channel11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>GPDMA1_Channel12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>GPDMA1_Channel13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>GPDMA1_Channel14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>GPDMA1_Channel15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[30]"></a>GPDMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[31]"></a>GPDMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>GPDMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPDMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>GPDMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[35]"></a>GPDMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>GPDMA1_Channel8_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>GPDMA1_Channel9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>GTZC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>HASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>I2C3_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C3_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>I2C4_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>I2C4_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>ICACHE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>IWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[83]"></a>LPDMA1_Channel0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[84]"></a>LPDMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[85]"></a>LPDMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[86]"></a>LPDMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>LPTIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>LPTIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>LPTIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[8e]"></a>LSECSSD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>MDF1_FLT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>MDF1_FLT1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>MDF1_FLT2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>MDF1_FLT3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[8a]"></a>MDF1_FLT4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[8b]"></a>MDF1_FLT5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>OCTOSPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[89]"></a>OCTOSPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>OTFDEC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>OTFDEC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>OTG_FS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>PKA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>PVD_PVM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>PWR_S3WU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>RAMCFG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>RCC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>RNG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>RTC_S_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[2d]"></a>SAES_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SAI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>SAI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>SDMMC1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>SDMMC2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TAMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>TIM1_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIM1_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>TIM1_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>TIM8_BRK_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>TIM8_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>TIM8_UP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>TSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>UCPD1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_stm32u585xx.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[191]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[192]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[b0]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[b3]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[b4]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[b7]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[b8]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>

<P><STRONG><a name="[b6]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[9a]"></a>_printf_int_hex</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, _printf_hex_int.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[193]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_int.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__printf</STRONG> (Thumb, 308 bytes, Stack size 40 bytes, __printf_flags_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[bd]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[be]"></a>__aeabi_memset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_fill
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pad_8bit_ch1st_3x3_constant_P1111
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_maxpool_is8os8_scalepos
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_maxpool_is8os8_scaleneg
</UL>

<P><STRONG><a name="[d0]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[ec]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[194]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[cb]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>

<P><STRONG><a name="[195]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[196]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[197]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[198]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[199]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[19a]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[19b]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[c1]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[a0]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[c3]"></a>__Heap_Initialize</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[19c]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[c4]"></a>__read_errno</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, _rserrno.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>

<P><STRONG><a name="[c6]"></a>__set_errno</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, _rserrno.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexpf
</UL>

<P><STRONG><a name="[b9]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[c7]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[c8]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[9c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[b5]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[fe]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMARxHalfCplt
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SAI_DMARxCplt
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[19e]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[19f]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[1a0]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[1a1]"></a>__rt_memclr</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[bf]"></a>_memset</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, rt_memclr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[1a2]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[d7]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[1a3]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[c5]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__read_errno
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[1a4]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[1a5]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[c0]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[1a6]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[c9]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[ca]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[cc]"></a>__flsbuf</STRONG> (Thumb, 482 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[153]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1a7]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[a2]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[a4]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[c2]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[a6]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[d3]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[ce]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[cf]"></a>_writebuf</STRONG> (Thumb, 108 bytes, Stack size 48 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[d9]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[cd]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[d1]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
</UL>

<P><STRONG><a name="[db]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[d4]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf
</UL>
<BR>[Calls]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1a8]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[ab]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[d6]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[d2]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[d5]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[da]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[1a9]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[de]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[dd]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display
</UL>
<BR>[Calls]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[df]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[1aa]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[ef]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>

<P><STRONG><a name="[1ab]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[a]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.BusFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.DebugMon_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[2e]"></a>GPDMA1_Channel0_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.GPDMA1_Channel0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = GPDMA1_Channel0_IRQHandler &rArr; HAL_DMA_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_DMA_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>GPDMA1_Channel1_IRQHandler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.GPDMA1_Channel1_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.MemManage_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.NMI_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>SysTick_Handler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[8f]"></a>SystemInit</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(.text)
</UL>
<P><STRONG><a name="[3f]"></a>TIM3_IRQHandler</STRONG> (Thumb, 262 bytes, Stack size 8 bytes, lto-llvm-f8a583.o(.text.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.UsageFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32u585xx.o(RESET)
</UL>
<P><STRONG><a name="[124]"></a>_lite_kernel_nl_softmax_is8os8</STRONG> (Thumb, 6346 bytes, Stack size 88 bytes, lite_nl_softmax_is8os8.o(.text._lite_kernel_nl_softmax_is8os8))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _lite_kernel_nl_softmax_is8os8
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_nl_softmax_is8os8
</UL>

<P><STRONG><a name="[126]"></a>_lite_kernel_nl_softmax_iu8ou8</STRONG> (Thumb, 2734 bytes, Stack size 92 bytes, lite_nl_softmax_iu8ou8.o(.text._lite_kernel_nl_softmax_iu8ou8))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = _lite_kernel_nl_softmax_iu8ou8
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_nl_softmax_iu8ou8
</UL>

<P><STRONG><a name="[af]"></a>_sys_exit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text._sys_exit))
<BR><BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[e0]"></a>_ttywrch</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text._ttywrch))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>

<P><STRONG><a name="[119]"></a>ai_array_get_byte_size</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, ai_datatypes_format.o(.text.ai_array_get_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_deep_sssa8_ch
</UL>

<P><STRONG><a name="[116]"></a>ai_array_get_data_byte_size</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, ai_datatypes_format.o(.text.ai_array_get_data_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[10d]"></a>ai_array_to_buffer_fmt</STRONG> (Thumb, 548 bytes, Stack size 0 bytes, ai_datatypes_format.o(.text.ai_array_to_buffer_fmt))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
</UL>

<P><STRONG><a name="[f4]"></a>ai_buffer_array_item_set_address</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ai_platform.o(.text.ai_buffer_array_item_set_address))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[10c]"></a>ai_buffer_array_sane</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, ai_platform.o(.text.ai_buffer_array_sane))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
</UL>

<P><STRONG><a name="[113]"></a>ai_buffer_get_size</STRONG> (Thumb, 256 bytes, Stack size 20 bytes, ai_platform.o(.text.ai_buffer_get_size))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = ai_buffer_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[111]"></a>ai_check_custom_types</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, layers.o(.text.ai_check_custom_types))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[118]"></a>ai_layers_forward_all</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, layers.o(.text.ai_layers_forward_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ai_layers_forward_all
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[114]"></a>ai_layers_init_all</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, layers.o(.text.ai_layers_init_all))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
</UL>

<P><STRONG><a name="[115]"></a>ai_layers_post_init_all</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, layers.o(.text.ai_layers_post_init_all))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ai_layers_post_init_all
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
</UL>

<P><STRONG><a name="[f3]"></a>ai_platform_bind_network_params</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, ai_platform_interface.o(.text.ai_platform_bind_network_params))
<BR><BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[f8]"></a>ai_platform_get_activations_map</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, ai_platform_interface.o(.text.ai_platform_get_activations_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_platform_get_activations_map
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_sane
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[f6]"></a>ai_platform_get_weights_map</STRONG> (Thumb, 376 bytes, Stack size 40 bytes, ai_platform_interface.o(.text.ai_platform_get_weights_map))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = ai_platform_get_weights_map
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_sane
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[fb]"></a>ai_platform_inputs_get</STRONG> (Thumb, 276 bytes, Stack size 56 bytes, ai_platform_interface.o(.text.ai_platform_inputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ai_platform_inputs_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[f2]"></a>ai_platform_network_create</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, ai_platform_interface.o(.text.ai_platform_network_create))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_platform_network_create
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_check_custom_types
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_version_get
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_init
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[fa]"></a>ai_platform_network_get_error</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, ai_platform_interface.o(.text.ai_platform_network_get_error))
<BR><BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_get_error
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[f5]"></a>ai_platform_network_init</STRONG> (Thumb, 1036 bytes, Stack size 64 bytes, ai_platform_interface.o(.text.ai_platform_network_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = ai_platform_network_init &rArr; ai_buffer_get_size
</UL>
<BR>[Calls]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_init_all
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_set_error
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[f9]"></a>ai_platform_network_post_init</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, ai_platform_interface.o(.text.ai_platform_network_post_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ai_platform_network_post_init &rArr; ai_layers_post_init_all
</UL>
<BR>[Calls]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_post_init_all
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[103]"></a>ai_platform_network_process</STRONG> (Thumb, 988 bytes, Stack size 48 bytes, ai_platform_interface.o(.text.ai_platform_network_process))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ai_platform_network_process &rArr; ai_layers_forward_all
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_layers_forward_all
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tensor_byte_size
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_data_byte_size
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_set_error
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_setup
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_get_size
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[f7]"></a>ai_platform_network_set_error</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, ai_platform_interface.o(.text.ai_platform_network_set_error))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[fc]"></a>ai_platform_outputs_get</STRONG> (Thumb, 280 bytes, Stack size 56 bytes, ai_platform_interface.o(.text.ai_platform_outputs_get))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = ai_platform_outputs_get
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_to_buffer_fmt
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;core_set_error
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>

<P><STRONG><a name="[110]"></a>ai_version_get</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, ai_datatypes_internal.o(.text.ai_version_get))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[11f]"></a>align_factor</STRONG> (Thumb, 1340 bytes, Stack size 0 bytes, st_align_factor.o(.text.align_factor))
<BR><BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dense_is8os8ws8
</UL>

<P><STRONG><a name="[11c]"></a>align_factor_ch</STRONG> (Thumb, 538 bytes, Stack size 48 bytes, st_align_factor.o(.text.align_factor_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = align_factor_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_deep_sssa8_ch
</UL>

<P><STRONG><a name="[112]"></a>core_get_error</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, core_common.o(.text.core_get_error))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
</UL>

<P><STRONG><a name="[10f]"></a>core_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, core_common.o(.text.core_init))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
</UL>

<P><STRONG><a name="[10e]"></a>core_set_error</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, core_common.o(.text.core_set_error))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
</UL>

<P><STRONG><a name="[0]"></a>forward_conv2d_deep_sssa8_ch</STRONG> (Thumb, 436 bytes, Stack size 176 bytes, layers_conv2d_sssa8_ch.o(.text.forward_conv2d_deep_sssa8_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 720<LI>Call Chain = forward_conv2d_deep_sssa8_ch &rArr; forward_lite_conv2d_deep_sssa8_ch &rArr; st_sssa8_ch_nn_mat_mult_conv2d_nt_t &rArr; weights_offset_contribution_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_deep_sssa8_ch
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_array_get_byte_size
</UL>
<BR>[Address Reference Count : 5]<UL><LI> lto-llvm-f8a583.o(.data.conv2d_6_layer)
<LI> lto-llvm-f8a583.o(.data.conv2d_12_layer)
<LI> lto-llvm-f8a583.o(.data.conv2d_18_layer)
<LI> lto-llvm-f8a583.o(.data.conv2d_24_layer)
<LI> lto-llvm-f8a583.o(.data.conv2d_30_layer)
</UL>
<P><STRONG><a name="[3]"></a>forward_dense_integer_SSSA</STRONG> (Thumb, 296 bytes, Stack size 64 bytes, layers_conv2d_stm32_integer.o(.text.forward_dense_integer_SSSA))
<BR><BR>[Stack]<UL><LI>Max Depth = 252 + Unknown Stack Size
<LI>Call Chain = forward_dense_integer_SSSA &rArr; forward_lite_dense_is8os8ws8 &rArr; st_sssa8_fully_connected &rArr; st_int8_reordered_no_shift_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dense_is8os8ws8
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lto-llvm-f8a583.o(.data.gemm_35_layer)
<LI> lto-llvm-f8a583.o(.data.gemm_36_layer)
</UL>
<P><STRONG><a name="[11a]"></a>forward_lite_conv2d_deep_sssa8_ch</STRONG> (Thumb, 698 bytes, Stack size 136 bytes, forward_lite_conv2d_sssa8_ch.o(.text.forward_lite_conv2d_deep_sssa8_ch))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = forward_lite_conv2d_deep_sssa8_ch &rArr; st_sssa8_ch_nn_mat_mult_conv2d_nt_t &rArr; weights_offset_contribution_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_nn_mat_mult_conv2d_nt_t
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_fullW_prefetch
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_factor_ch
</UL>
<BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_conv2d_deep_sssa8_ch
</UL>

<P><STRONG><a name="[11b]"></a>forward_lite_dense_is8os8ws8</STRONG> (Thumb, 100 bytes, Stack size 72 bytes, forward_lite_dense_is8os8ws8.o(.text.forward_lite_dense_is8os8ws8))
<BR><BR>[Stack]<UL><LI>Max Depth = 188 + Unknown Stack Size
<LI>Call Chain = forward_lite_dense_is8os8ws8 &rArr; st_sssa8_fully_connected &rArr; st_int8_reordered_no_shift_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_fully_connected
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;align_factor
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_dense_integer_SSSA
</UL>

<P><STRONG><a name="[121]"></a>forward_lite_maxpool_is8os8_scaleneg</STRONG> (Thumb, 1580 bytes, Stack size 320 bytes, forward_lite_maxpool_is8os8.o(.text.forward_lite_maxpool_is8os8_scaleneg))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = forward_lite_maxpool_is8os8_scaleneg &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_func_mp_array_integer_INT8
</UL>

<P><STRONG><a name="[122]"></a>forward_lite_maxpool_is8os8_scalepos</STRONG> (Thumb, 1576 bytes, Stack size 320 bytes, forward_lite_maxpool_is8os8_scalepos.o(.text.forward_lite_maxpool_is8os8_scalepos))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = forward_lite_maxpool_is8os8_scalepos &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_func_mp_array_integer_INT8
</UL>

<P><STRONG><a name="[123]"></a>forward_lite_nl_softmax_is8os8</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, lite_nl_generic_integer.o(.text.forward_lite_nl_softmax_is8os8))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = forward_lite_nl_softmax_is8os8 &rArr; _lite_kernel_nl_softmax_is8os8
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_kernel_nl_softmax_is8os8
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_sm_integer
</UL>

<P><STRONG><a name="[125]"></a>forward_lite_nl_softmax_iu8ou8</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, lite_nl_generic_integer.o(.text.forward_lite_nl_softmax_iu8ou8))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = forward_lite_nl_softmax_iu8ou8 &rArr; _lite_kernel_nl_softmax_iu8ou8
</UL>
<BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_lite_kernel_nl_softmax_iu8ou8
</UL>
<BR>[Called By]<UL><LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_sm_integer
</UL>

<P><STRONG><a name="[127]"></a>forward_lite_node_convert_integer_if32os8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, forward_lite_convert.o(.text.forward_lite_node_convert_integer_if32os8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = forward_lite_node_convert_integer_if32os8 &rArr; lite_convert_if32os8
</UL>
<BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_convert_if32os8
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[129]"></a>forward_lite_node_convert_integer_if32ou8</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, forward_lite_convert.o(.text.forward_lite_node_convert_integer_if32ou8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = forward_lite_node_convert_integer_if32ou8 &rArr; lite_convert_if32ou8
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_convert_if32ou8
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[12b]"></a>forward_lite_node_convert_integer_is8of32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, forward_lite_convert.o(.text.forward_lite_node_convert_integer_is8of32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = forward_lite_node_convert_integer_is8of32 &rArr; lite_convert_is8of32
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_convert_is8of32
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[12d]"></a>forward_lite_node_convert_integer_iu8of32</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, forward_lite_convert.o(.text.forward_lite_node_convert_integer_iu8of32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = forward_lite_node_convert_integer_iu8of32 &rArr; lite_convert_iu8of32
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;lite_convert_iu8of32
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[12f]"></a>forward_lite_pad_8bit_ch1st_3x3_constant_P0022</STRONG> (Thumb, 210 bytes, Stack size 48 bytes, forward_lite_pad_generic.o(.text.forward_lite_pad_8bit_ch1st_3x3_constant_P0022))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = forward_lite_pad_8bit_ch1st_3x3_constant_P0022 &rArr; st_int8_fill &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad_8bit_ch1st_3x3_constant
</UL>

<P><STRONG><a name="[131]"></a>forward_lite_pad_8bit_ch1st_3x3_constant_P1111</STRONG> (Thumb, 1150 bytes, Stack size 56 bytes, forward_lite_pad_generic.o(.text.forward_lite_pad_8bit_ch1st_3x3_constant_P1111))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = forward_lite_pad_8bit_ch1st_3x3_constant_P1111 &rArr; st_int8_fill &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_fill
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad_8bit_ch1st_3x3_constant
</UL>

<P><STRONG><a name="[132]"></a>forward_lite_pad_constant</STRONG> (Thumb, 414 bytes, Stack size 56 bytes, forward_lite_pad_generic.o(.text.forward_lite_pad_constant))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = forward_lite_pad_constant &rArr; st_int8_fill &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_fill
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad_constant
</UL>

<P><STRONG><a name="[133]"></a>forward_lite_pad_edge</STRONG> (Thumb, 352 bytes, Stack size 56 bytes, forward_lite_pad_generic.o(.text.forward_lite_pad_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = forward_lite_pad_edge &rArr; st_int8_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad_edge
</UL>

<P><STRONG><a name="[134]"></a>forward_lite_pad_reflect</STRONG> (Thumb, 518 bytes, Stack size 88 bytes, forward_lite_pad_generic.o(.text.forward_lite_pad_reflect))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = forward_lite_pad_reflect &rArr; st_int8_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad_reflect
</UL>

<P><STRONG><a name="[5]"></a>forward_mp_integer_INT8</STRONG> (Thumb, 98 bytes, Stack size 72 bytes, layers_pool_stm32_integer.o(.text.forward_mp_integer_INT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 484<LI>Call Chain = forward_mp_integer_INT8 &rArr; pool_func_mp_array_integer_INT8 &rArr; forward_lite_maxpool_is8os8_scalepos &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pool_func_mp_array_integer_INT8
</UL>
<BR>[Address Reference Count : 5]<UL><LI> lto-llvm-f8a583.o(.data.pool_9_layer)
<LI> lto-llvm-f8a583.o(.data.pool_15_layer)
<LI> lto-llvm-f8a583.o(.data.pool_21_layer)
<LI> lto-llvm-f8a583.o(.data.pool_27_layer)
<LI> lto-llvm-f8a583.o(.data.pool_33_layer)
</UL>
<P><STRONG><a name="[1]"></a>forward_pad</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, layers_generic_float.o(.text.forward_pad))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = forward_pad &rArr; forward_pad_reflect &rArr; forward_lite_pad_reflect &rArr; st_int8_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad_reflect
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad_8bit_ch1st_3x3_constant
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad_edge
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad_constant
</UL>
<BR>[Address Reference Count : 5]<UL><LI> lto-llvm-f8a583.o(.data.conv2d_6_pad_before_layer)
<LI> lto-llvm-f8a583.o(.data.conv2d_12_pad_before_layer)
<LI> lto-llvm-f8a583.o(.data.conv2d_18_pad_before_layer)
<LI> lto-llvm-f8a583.o(.data.conv2d_24_pad_before_layer)
<LI> lto-llvm-f8a583.o(.data.conv2d_30_pad_before_layer)
</UL>
<P><STRONG><a name="[138]"></a>forward_pad_8bit_ch1st_3x3_constant</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, layers_pad_generic.o(.text.forward_pad_8bit_ch1st_3x3_constant))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = forward_pad_8bit_ch1st_3x3_constant &rArr; forward_lite_pad_8bit_ch1st_3x3_constant_P1111 &rArr; st_int8_fill &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pad_8bit_ch1st_3x3_constant_P1111
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pad_8bit_ch1st_3x3_constant_P0022
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad
</UL>

<P><STRONG><a name="[136]"></a>forward_pad_constant</STRONG> (Thumb, 120 bytes, Stack size 64 bytes, layers_pad_generic.o(.text.forward_pad_constant))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = forward_pad_constant &rArr; forward_lite_pad_constant &rArr; st_int8_fill &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pad_constant
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad
</UL>

<P><STRONG><a name="[137]"></a>forward_pad_edge</STRONG> (Thumb, 100 bytes, Stack size 64 bytes, layers_pad_generic.o(.text.forward_pad_edge))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = forward_pad_edge &rArr; forward_lite_pad_edge &rArr; st_int8_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pad_edge
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad
</UL>

<P><STRONG><a name="[139]"></a>forward_pad_reflect</STRONG> (Thumb, 162 bytes, Stack size 104 bytes, layers_pad_generic.o(.text.forward_pad_reflect))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = forward_pad_reflect &rArr; forward_lite_pad_reflect &rArr; st_int8_copy
</UL>
<BR>[Calls]<UL><LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pad_reflect
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_pad
</UL>

<P><STRONG><a name="[4]"></a>forward_sm_integer</STRONG> (Thumb, 282 bytes, Stack size 64 bytes, layers_nl_stm32_integer.o(.text.forward_sm_integer))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = forward_sm_integer &rArr; forward_lite_nl_softmax_iu8ou8 &rArr; _lite_kernel_nl_softmax_iu8ou8
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_nl_softmax_iu8ou8
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_nl_softmax_is8os8
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-f8a583.o(.data.nl_37_layer)
</UL>
<P><STRONG><a name="[10b]"></a>get_tensor_byte_size</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, ai_datatypes_internal.o(.text.get_tensor_byte_size))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_platform_network_state_setup
</UL>

<P><STRONG><a name="[128]"></a>lite_convert_if32os8</STRONG> (Thumb, 400 bytes, Stack size 8 bytes, lite_convert_kernel.o(.text.lite_convert_if32os8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lite_convert_if32os8
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_node_convert_integer_if32os8
</UL>

<P><STRONG><a name="[12a]"></a>lite_convert_if32ou8</STRONG> (Thumb, 270 bytes, Stack size 8 bytes, lite_convert_kernel.o(.text.lite_convert_if32ou8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lite_convert_if32ou8
</UL>
<BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_node_convert_integer_if32ou8
</UL>

<P><STRONG><a name="[12c]"></a>lite_convert_is8of32</STRONG> (Thumb, 232 bytes, Stack size 8 bytes, lite_convert_kernel.o(.text.lite_convert_is8of32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lite_convert_is8of32
</UL>
<BR>[Called By]<UL><LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_node_convert_integer_is8of32
</UL>

<P><STRONG><a name="[12e]"></a>lite_convert_iu8of32</STRONG> (Thumb, 226 bytes, Stack size 8 bytes, lite_convert_kernel.o(.text.lite_convert_iu8of32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = lite_convert_iu8of32
</UL>
<BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_node_convert_integer_iu8of32
</UL>

<P><STRONG><a name="[aa]"></a>main</STRONG> (Thumb, 3872 bytes, Stack size 56 bytes, lto-llvm-f8a583.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 188744 + Unknown Stack Size
<LI>Call Chain = main &rArr; MX_X_CUBE_AI_Process &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Receive_DMA
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Start_IT
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetRxFifoThreshold
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UARTEx_SetTxFifoThreshold
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIMEx_MasterConfigSynchronization
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_ConfigClockSource
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_TIM_Base_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2]"></a>node_convert</STRONG> (Thumb, 724 bytes, Stack size 24 bytes, core_convert.o(.text.node_convert))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = node_convert &rArr; __hardfp_ldexpf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int16_to_f32
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_f32_to_int16
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_to_f32
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_f32_to_int8
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_node_convert_integer_iu8of32
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_node_convert_integer_if32ou8
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_node_convert_integer_is8of32
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_node_convert_integer_if32os8
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexpf
</UL>
<BR>[Address Reference Count : 2]<UL><LI> lto-llvm-f8a583.o(.data.conversion_0_layer)
<LI> lto-llvm-f8a583.o(.data.conversion_38_layer)
</UL>
<P><STRONG><a name="[135]"></a>pool_func_mp_array_integer_INT8</STRONG> (Thumb, 232 bytes, Stack size 88 bytes, layers_pool_stm32_integer.o(.text.pool_func_mp_array_integer_INT8))
<BR><BR>[Stack]<UL><LI>Max Depth = 412<LI>Call Chain = pool_func_mp_array_integer_INT8 &rArr; forward_lite_maxpool_is8os8_scalepos &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_maxpool_is8os8_scalepos
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_maxpool_is8os8_scaleneg
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_mp_integer_INT8
</UL>

<P><STRONG><a name="[144]"></a>st_f32_to_int16</STRONG> (Thumb, 708 bytes, Stack size 8 bytes, st_f32_to_int16.o(.text.st_f32_to_int16))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_f32_to_int16
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[142]"></a>st_f32_to_int8</STRONG> (Thumb, 708 bytes, Stack size 8 bytes, st_f32_to_int8.o(.text.st_f32_to_int8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_f32_to_int8
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[145]"></a>st_int16_to_f32</STRONG> (Thumb, 744 bytes, Stack size 8 bytes, st_int16_to_f32.o(.text.st_int16_to_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_int16_to_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[117]"></a>st_int8_copy</STRONG> (Thumb, 556 bytes, Stack size 20 bytes, st_int8_fill.o(.text.st_int8_copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = st_int8_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pad_reflect
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pad_edge
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pad_constant
</UL>

<P><STRONG><a name="[130]"></a>st_int8_fill</STRONG> (Thumb, 246 bytes, Stack size 32 bytes, st_int8_fill.o(.text.st_int8_fill))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = st_int8_fill &rArr; __aeabi_memset &rArr; _memset &rArr; _memset_w
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pad_constant
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pad_8bit_ch1st_3x3_constant_P1111
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_pad_8bit_ch1st_3x3_constant_P0022
</UL>

<P><STRONG><a name="[14a]"></a>st_int8_reordered_no_shift_zero</STRONG> (Thumb, 306 bytes, Stack size 20 bytes, st_int8_reordered_no_shift.o(.text.st_int8_reordered_no_shift_zero))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = st_int8_reordered_no_shift_zero
</UL>
<BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_fully_connected
</UL>

<P><STRONG><a name="[143]"></a>st_int8_to_f32</STRONG> (Thumb, 744 bytes, Stack size 8 bytes, st_int8_to_f32.o(.text.st_int8_to_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_int8_to_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[148]"></a>st_sssa8_ch_1_output_mgt</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, st_sssa8_ch_nn_mat_mult_nt_t.o(.text.st_sssa8_ch_1_output_mgt))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = st_sssa8_ch_1_output_mgt
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_nn_mat_mult_conv2d_nt_t
</UL>

<P><STRONG><a name="[149]"></a>st_sssa8_ch_2_output_mgt</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, st_sssa8_ch_nn_mat_mult_nt_t.o(.text.st_sssa8_ch_2_output_mgt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = st_sssa8_ch_2_output_mgt
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_nn_mat_mult_conv2d_nt_t
</UL>

<P><STRONG><a name="[11d]"></a>st_sssa8_ch_fullW_prefetch</STRONG> (Thumb, 154 bytes, Stack size 48 bytes, st_sssa8_ch_nn_mat_mult_nt_t.o(.text.st_sssa8_ch_fullW_prefetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 108<LI>Call Chain = st_sssa8_ch_fullW_prefetch &rArr; weights_2channels_prefetch
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weights_2channels_prefetch
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_deep_sssa8_ch
</UL>

<P><STRONG><a name="[11e]"></a>st_sssa8_ch_nn_mat_mult_conv2d_nt_t</STRONG> (Thumb, 4528 bytes, Stack size 336 bytes, st_sssa8_ch_nn_mat_mult_conv2d_nt_t.o(.text.st_sssa8_ch_nn_mat_mult_conv2d_nt_t))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = st_sssa8_ch_nn_mat_mult_conv2d_nt_t &rArr; weights_offset_contribution_calc
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_2_output_mgt
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_1_output_mgt
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weights_offset_contribution_calc
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;weights_2channels_prefetch
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_conv2d_deep_sssa8_ch
</UL>

<P><STRONG><a name="[14b]"></a>st_sssa8_dense_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, st_sssa8_dense_loop.o(.text.st_sssa8_dense_memopt_loop))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_fully_connected
</UL>

<P><STRONG><a name="[14c]"></a>st_sssa8_dense_memopt_loop</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, st_sssa8_dense_loop.o(.text.st_sssa8_dense_memopt_loop))
<BR><BR>[Called By]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_fully_connected
</UL>

<P><STRONG><a name="[120]"></a>st_sssa8_fully_connected</STRONG> (Thumb, 1444 bytes, Stack size 96 bytes, st_sssa8_dense.o(.text.st_sssa8_fully_connected))
<BR><BR>[Stack]<UL><LI>Max Depth = 116 + Unknown Stack Size
<LI>Call Chain = st_sssa8_fully_connected &rArr; st_int8_reordered_no_shift_zero
</UL>
<BR>[Calls]<UL><LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_int8_reordered_no_shift_zero
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_dense_memopt_loop
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_dense_loop
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;forward_lite_dense_is8os8ws8
</UL>

<P><STRONG><a name="[146]"></a>weights_2channels_prefetch</STRONG> (Thumb, 1514 bytes, Stack size 60 bytes, st_sssa8_ch_nn_mat_mult_nt_t.o(.text.weights_2channels_prefetch))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = weights_2channels_prefetch
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_nn_mat_mult_conv2d_nt_t
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_fullW_prefetch
</UL>

<P><STRONG><a name="[147]"></a>weights_offset_contribution_calc</STRONG> (Thumb, 1678 bytes, Stack size 72 bytes, st_sssa8_ch_nn_mat_mult_nt_t.o(.text.weights_offset_contribution_calc))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = weights_offset_contribution_calc
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;st_sssa8_ch_nn_mat_mult_conv2d_nt_t
</UL>

<P><STRONG><a name="[141]"></a>__hardfp_ldexpf</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ldexpf.o(i.__hardfp_ldexpf))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __hardfp_ldexpf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_underflow
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_overflow
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;node_convert
</UL>

<P><STRONG><a name="[102]"></a>__hardfp_logf</STRONG> (Thumb, 320 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __hardfp_logf &rArr; __set_errno
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_invalid
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_infnan
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_flt_divzero
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[1ac]"></a>__mathlib_logf</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, logf.o(i.__hardfp_logf), UNUSED)

<P><STRONG><a name="[152]"></a>__mathlib_flt_divzero</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_divzero))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[150]"></a>__mathlib_flt_infnan</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_infnan))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[151]"></a>__mathlib_flt_invalid</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_invalid))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
</UL>

<P><STRONG><a name="[14f]"></a>__mathlib_flt_overflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_overflow))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexpf
</UL>

<P><STRONG><a name="[14e]"></a>__mathlib_flt_underflow</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, funder.o(i.__mathlib_flt_underflow))
<BR><BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexpf
</UL>

<P><STRONG><a name="[bb]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[91]"></a>fputc</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[107]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[154]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[159]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[1ad]"></a>__aeabi_cdcmpeq</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)

<P><STRONG><a name="[158]"></a>_dcmpeq</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, deqf.o(x$fpl$deqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dneq
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deq
</UL>

<P><STRONG><a name="[108]"></a>__aeabi_d2iz</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[15a]"></a>_dfix</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, dfix.o(x$fpl$dfix), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[105]"></a>__aeabi_i2d</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt))
<BR><BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[1ae]"></a>_dflt</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, dflt_clz.o(x$fpl$dflt), UNUSED)

<P><STRONG><a name="[1af]"></a>__aeabi_cdcmpge</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)

<P><STRONG><a name="[15b]"></a>_dcmpge</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dgeqf.o(x$fpl$dgeqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgeq
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dgr
</UL>

<P><STRONG><a name="[1b0]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[15c]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dls
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dleq
</UL>

<P><STRONG><a name="[1b1]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[157]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dfix
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[156]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[106]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[15d]"></a>_dsub</STRONG> (Thumb, 472 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[ff]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[15f]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[161]"></a>__fpl_fcheck_NaN1</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fcheck1.o(x$fpl$fcheck1))
<BR><BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbnf
</UL>

<P><STRONG><a name="[1b2]"></a>__aeabi_dcmpeq</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[163]"></a>_deq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[164]"></a>_dneq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpeq
</UL>

<P><STRONG><a name="[1b3]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[165]"></a>_dgr</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[1b4]"></a>__aeabi_dcmpge</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)

<P><STRONG><a name="[166]"></a>_dgeq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmpge
</UL>

<P><STRONG><a name="[100]"></a>__aeabi_dcmple</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[167]"></a>_dleq</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[104]"></a>__aeabi_dcmplt</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[168]"></a>_dls</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dcmp.o(x$fpl$fcmp), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[160]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[9e]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[1b5]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[1b6]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[162]"></a>__fpl_return_NaN</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, retnan.o(x$fpl$retnan))
<BR><BR>[Calls]<UL><LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_cmpreturn
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>

<P><STRONG><a name="[14d]"></a>__ARM_scalbnf</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, scalbnf.o(x$fpl$scalbnf))
<BR><BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fcheck_NaN1
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_ldexpf
</UL>

<P><STRONG><a name="[169]"></a>__fpl_cmpreturn</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, trapv.o(x$fpl$trapveneer))
<BR><BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_return_NaN
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10a]"></a>_platform_network_state_setup</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, ai_platform_interface.o(.text._platform_network_state_setup))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _platform_network_state_setup
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_tensor_byte_size
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
</UL>

<P><STRONG><a name="[15e]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[155]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[92]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[f1]"></a>MX_X_CUBE_AI_Init</STRONG> (Thumb, 1892 bytes, Stack size 120 bytes, lto-llvm-f8a583.o(.text.MX_X_CUBE_AI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = MX_X_CUBE_AI_Init &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_bind_network_params
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_create
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_buffer_array_item_set_address
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_weights_map
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_set_error
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_inputs_get
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_outputs_get
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_post_init
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_get_activations_map
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fd]"></a>MX_X_CUBE_AI_Process</STRONG> (Thumb, 5424 bytes, Stack size 188520 bytes, lto-llvm-f8a583.o(.text.MX_X_CUBE_AI_Process))
<BR><BR>[Stack]<UL><LI>Max Depth = 188688 + Unknown Stack Size
<LI>Call Chain = MX_X_CUBE_AI_Process &rArr; arm_radix8_butterfly_f32
</UL>
<BR>[Calls]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_get_error
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ai_platform_network_process
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__hardfp_logf
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Transmit
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;arm_radix8_butterfly_f32
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[101]"></a>arm_radix8_butterfly_f32</STRONG> (Thumb, 1276 bytes, Stack size 168 bytes, lto-llvm-f8a583.o(.text.arm_radix8_butterfly_f32))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = arm_radix8_butterfly_f32
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[109]"></a>HAL_UART_Transmit</STRONG> (Thumb, 304 bytes, Stack size 16 bytes, lto-llvm-f8a583.o(.text.HAL_UART_Transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UART_Transmit
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_X_CUBE_AI_Process
</UL>

<P><STRONG><a name="[e4]"></a>HAL_RCC_GetSysClockFreq</STRONG> (Thumb, 252 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.HAL_RCC_GetSysClockFreq))
<BR><BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK3Freq
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>HAL_GPIO_Init</STRONG> (Thumb, 582 bytes, Stack size 48 bytes, lto-llvm-f8a583.o(.text.HAL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[eb]"></a>HAL_SAI_Init</STRONG> (Thumb, 1582 bytes, Stack size 264 bytes, lto-llvm-f8a583.o(.text.HAL_SAI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = HAL_SAI_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>HAL_TIM_Base_Init</STRONG> (Thumb, 790 bytes, Stack size 12 bytes, lto-llvm-f8a583.o(.text.HAL_TIM_Base_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_TIM_Base_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13b]"></a>HAL_TIM_ConfigClockSource</STRONG> (Thumb, 458 bytes, Stack size 8 bytes, lto-llvm-f8a583.o(.text.HAL_TIM_ConfigClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIM_ConfigClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13c]"></a>HAL_TIMEx_MasterConfigSynchronization</STRONG> (Thumb, 346 bytes, Stack size 8 bytes, lto-llvm-f8a583.o(.text.HAL_TIMEx_MasterConfigSynchronization))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_TIMEx_MasterConfigSynchronization
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ee]"></a>HAL_UART_Init</STRONG> (Thumb, 1414 bytes, Stack size 248 bytes, lto-llvm-f8a583.o(.text.HAL_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = HAL_UART_Init &rArr; HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_WaitOnFlagUntilTimeout
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GPIO_Init
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13d]"></a>HAL_UARTEx_SetTxFifoThreshold</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lto-llvm-f8a583.o(.text.HAL_UARTEx_SetTxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetTxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13e]"></a>HAL_UARTEx_SetRxFifoThreshold</STRONG> (Thumb, 136 bytes, Stack size 16 bytes, lto-llvm-f8a583.o(.text.HAL_UARTEx_SetRxFifoThreshold))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_UARTEx_SetRxFifoThreshold
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>HAL_TIM_Base_Start_IT</STRONG> (Thumb, 262 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.HAL_TIM_Base_Start_IT))
<BR><BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[140]"></a>HAL_SAI_Receive_DMA</STRONG> (Thumb, 508 bytes, Stack size 16 bytes, lto-llvm-f8a583.o(.text.HAL_SAI_Receive_DMA))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_SAI_Receive_DMA
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e1]"></a>HAL_DMA_IRQHandler</STRONG> (Thumb, 416 bytes, Stack size 8 bytes, lto-llvm-f8a583.o(.text.HAL_DMA_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_DMA_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPDMA1_Channel0_IRQHandler
</UL>

<P><STRONG><a name="[e3]"></a>HAL_RCC_GetPCLK3Freq</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lto-llvm-f8a583.o(.text.HAL_RCC_GetPCLK3Freq))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = HAL_RCC_GetPCLK3Freq
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[e8]"></a>HAL_RCCEx_PeriphCLKConfig</STRONG> (Thumb, 1440 bytes, Stack size 40 bytes, lto-llvm-f8a583.o(.text.HAL_RCCEx_PeriphCLKConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = HAL_RCCEx_PeriphCLKConfig &rArr; RCCEx_PLL3_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL3_Config
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[e9]"></a>RCCEx_PLL2_Config</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, lto-llvm-f8a583.o(.text.RCCEx_PLL2_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCCEx_PLL2_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[ea]"></a>RCCEx_PLL3_Config</STRONG> (Thumb, 336 bytes, Stack size 16 bytes, lto-llvm-f8a583.o(.text.RCCEx_PLL3_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCCEx_PLL3_Config
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_PeriphCLKConfig
</UL>

<P><STRONG><a name="[e7]"></a>HAL_RCCEx_GetPLL1ClockFreq</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, lto-llvm-f8a583.o(.text.HAL_RCCEx_GetPLL1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL1ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[e5]"></a>HAL_RCCEx_GetPLL2ClockFreq</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, lto-llvm-f8a583.o(.text.HAL_RCCEx_GetPLL2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL2ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[e6]"></a>HAL_RCCEx_GetPLL3ClockFreq</STRONG> (Thumb, 372 bytes, Stack size 16 bytes, lto-llvm-f8a583.o(.text.HAL_RCCEx_GetPLL3ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPeriphCLKFreq
</UL>

<P><STRONG><a name="[e2]"></a>HAL_RCCEx_GetPeriphCLKFreq</STRONG> (Thumb, 1442 bytes, Stack size 24 bytes, lto-llvm-f8a583.o(.text.HAL_RCCEx_GetPeriphCLKFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = HAL_RCCEx_GetPeriphCLKFreq &rArr; HAL_RCCEx_GetPLL3ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL3ClockFreq
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL2ClockFreq
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCCEx_GetPLL1ClockFreq
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetPCLK3Freq
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_RCC_GetSysClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_SAI_Init
</UL>

<P><STRONG><a name="[95]"></a>SAI_DMAError</STRONG> (Thumb, 118 bytes, Stack size 0 bytes, lto-llvm-f8a583.o(.text.SAI_DMAError))
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-f8a583.o(.text.HAL_SAI_Receive_DMA)
</UL>
<P><STRONG><a name="[93]"></a>SAI_DMARxCplt</STRONG> (Thumb, 126 bytes, Stack size 8 bytes, lto-llvm-f8a583.o(.text.SAI_DMARxCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAI_DMARxCplt &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-f8a583.o(.text.HAL_SAI_Receive_DMA)
</UL>
<P><STRONG><a name="[94]"></a>SAI_DMARxHalfCplt</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, lto-llvm-f8a583.o(.text.SAI_DMARxHalfCplt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SAI_DMARxHalfCplt &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lto-llvm-f8a583.o(.text.HAL_SAI_Receive_DMA)
</UL>
<P><STRONG><a name="[f0]"></a>UART_WaitOnFlagUntilTimeout</STRONG> (Thumb, 596 bytes, Stack size 8 bytes, lto-llvm-f8a583.o(.text.UART_WaitOnFlagUntilTimeout))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UART_WaitOnFlagUntilTimeout
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_UART_Init
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
